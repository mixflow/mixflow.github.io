# encoding: utf-8

$ = domUtil
$(document).on 'DOMContentLoaded', (evt) -> # dom ready(loaded)

  mediaQuery = window.matchMedia("(all)") # window.matchMedia("(min-width:720px)")
  # record the loop gallery image, clearInterval when there is no need
  galleryImageInterval = undefined

  text_info_setting =
    0:
      title: 'Blender Cycles 室内interior高质量作品'
      link: '/2018/05/29/blender-cycles-interior/'
      detail: '点击查看个人作品，<br/>照片级 3D 作品，基于现实设计，真实再现'
    1:
      title: 'Unreal Engine4 虚幻四作品 「林中小径」'
      link: '/2017/08/22/UE4-work-forest-path-with-panorama/'
      detail: '点击查看个人作品，<br/>使用UE4构建光影斑驳的森林场景 <br/>包含全景画方式浏览，360° & 180°观看四周'
    2:
      title: '神经网络算法转变 图画的艺术风格'
      link: '/2017/06/27/image-style-transfer-using-neural-style'
      detail: '点击查看一系列作品，纯粹由卷积神经网络算法生成的作品'
  # helper function to change the text and url link in middle
  changeMiddleInfo = do (key_indices_to_infos =  text_info_setting) ->
    info = $(".gallery-middle-info-wrap .info-wrap .info")
    text_info = $(".gallery-middle-info-wrap .text-info")
    link = $(".gallery-middle-info-wrap .middle-info-content .gallery-info-link")
    info_dom = info.get()
    text_info_dom = text_info.get()

    return (key) ->
      item = key_indices_to_infos[key]
      if item
        replace_info = item["title"]
        replace_link = item["link"]
        replace_text_info = item["detail"]

        info_dom.innerText = replace_info if replace_info
        link.setAttributes {href: replace_link} if replace_link
        text_info_dom.innerHTML = replace_text_info if replace_text_info

  # background video
  showBGVideo = do ->
    # show background video based on media query (screen size)
    is_show = false

    # for changing the middle info. it would happen when video reaches the key time
    time2key = # key is video seconds
      0: 1
      12: 1
      24: 2

    return ->
      if not is_show

        v = document.createElement("video")
        videoSource = 'videos/BookRoom.mkv'

        $(v).setAttributes
          loop: 'loop'
          muted: 'muted'
          preload: 'auto'
          autoplay: 'autoplay'
          src: videoSource
        .on 'timeupdate', (evt)=>
          # only the Integer
          now = evt.target.currentTime.toFixed(0)
          key = time2key[now]
          changeMiddleInfo(key) if key


        gallery = $(".gallery")
        gallery.get().appendChild(v)

        images = $("img", gallery)?.css({display:'none'})

        # stop the loop gallery images
        clearInterval(galleryImageInterval) if galleryImageInterval
        # img.css({display: 'none'}) for img in images
        is_show =true

  showBGVideoBaseOnMedieQuery = (mediaQuery)->
    if (mediaQuery.matches)
      showBGVideo()
    else
      # media query doesn't match

  # mediaQuery.addListener showBGVideoBaseOnMedieQuery

  # load
  # showBGVideoBaseOnMedieQuery(mediaQuery)
  # [end] background video of home page

  do (mediaQuery=mediaQuery) -> # load gallery image and switch images auto
    if not mediaQuery.matches # small screen
      image_show_sytle = {opacity: 1}
      image_hide_sytle = {opacity: 0}

      gallery = $(".gallery")
      images = $("img.gallery-image", gallery)
      images = [images] if not images.length # wrap one element in an array

      # show first image and hide other
      images.css image_hide_sytle
      images[0].css image_show_sytle

      # load images whose url is stored in 'data-src' attribute.
      for img in images
        if not img.get().getAttribute("src")
          img.setAttributes({src: img.get().getAttribute("data-src")})


      galleryJumpTo = (idx) -> # jump to the index of image
        images = $("img.gallery-image", gallery)

        # reset the index
        idx = 0 if idx >= images.length or idx < 0

        # img number in HTML start with 1. the number is  index plus 1
        target_elem_id = "gallery-image-#{idx + 1}"
        $('#gallery-image-'+ (idx+1), gallery).css image_show_sytle
        # hide other images
        images.forEach( (img) ->
          if target_elem_id == img.getAttribute("id")
            img.css image_show_sytle
          else
            img.css image_hide_sytle
          )

        # update middle info
        changeMiddleInfo(idx)
      #[end] galleryJumpTo

      imageGalleryControl = do ->
        next_id = 0 # the next target index of image array

        galleryImageLoop = -> # get the actual function. call once

          # reset the index if reach the outside of scope.
          next_id = 0 if next_id >= images.length

          galleryJumpTo(next_id)

          # increase index
          next_id += 1
        # [end] galleryImageLoop

        galleryImageLoop() # initial call
        galleryImageInterval = setInterval(galleryImageLoop, 7500) #  change image in ms

        stopGallery = ->
          clearInterval galleryImageInterval if galleryImageInterval
        # [end] stopGallery

        resetGallery = (now_idx)->
          stopGallery() if galleryImageInterval # stop the old one

          next_id = now_idx + 1 if now_idx
          galleryImageInterval = setInterval(galleryImageLoop, 7500)
        # [end] restartGallery

        return {stopGallery, resetGallery}
      # [end] imageGalleryControl

      # client control
      clientJumpTo  = (idx) ->
        # 1. jump to the idx image
        galleryJumpTo(idx)
        # 2. reset
        imageGalleryControl.resetGallery(idx)
      # [end] clientJumpTo

      $(".gallery-jump-point", gallery).forEach( (jumpPoint) ->
        idx = parseInt(jumpPoint.getAttribute('data-idx'), 10)

        jumpPoint.on("click", (event) -> clientJumpTo(idx) )
        )

    return # End gallery image (auto switch)

  return # DOMContentLoaded Event Function End
